#1
p "カフェラテ".match?(/ラテ/)  #=> true
p "ティーラテ".match?(/ラテ/)  #=> true
p "モカ".match?(/ラテ/)        #=> false
# <hint>
# /で囲んで書くと正規表現オブジェクトとなる。

#2
p "カフェラテ".match?(/ラテ\z/)  #=> true
p "ティーラテ".match?(/ラテ\z/)  #=> true
p "ラテアート".match?(/ラテ\z/)  #=> false
# <hint>
# \z（小文字）は文字列末尾にマッチするパターン

#3
p "カフェラテ".match?(/\Aラテ/)  #=> false
p "ティーラテ".match?(/\Aラテ/)  #=> false
p "ラテアート".match?(/\Aラテ/)  #=> true
# <hint>
# \A（大文字）は文字列先頭にマッチするパターン

#4
p "axyz".match?(/[abc]/)  #=> true
# <hint>
# []で囲むと中の文字群のどれか１文字とマッチするパターン

#5
p "axyz".match?(/[A-Za-z0-9]/)  #=> true
# <hint>
# 範囲指定するパターン

p "axyz".match?(/[A-Z0-9]/)  #=> false
# <hint>
# 範囲指定するパターン

#6
p "abc".match?(/a.c/)  #=> true
# <hint>
# 任意の１文字とマッチするパターン

p "abd".match?(/a.c/)  #=> false
# <hint>
# 任意の１文字とマッチするパターン

#7
p "a".match?(/a*/)  #=> true
# <hint>
# 前の文字が０回以上繰り返すときにマッチするパターン
# aを１回繰り返す

p "aa".match?(/a*/)  #=> true
# <hint>
# 前の文字が０回以上繰り返すときにマッチするパターン
# aを２回繰り返す

p "".match?(/a*/)  #=> true
# <hint>
# 前の文字が０回以上繰り返すときにマッチするパターン
# aを０回繰り返す

#8
p "a".match?(/a+/)  #=> true
# <hint>
# 前の文字が１回以上繰り返すときにマッチするパターン
# aを１回繰り返す

p "aa".match?(/a+/)  #=> true
# <hint>
# 前の文字が１回以上繰り返すときにマッチするパターン
# aを２回繰り返す

p "".match?(/a+/)  #=> false
# <hint>
# 前の文字が１回以上繰り返すときにマッチするパターン
# aを０回繰り返す

#
["カフェラテ","モカ","コーヒー"].each do |drink|
  puts drink if drink.match?(/ラテ/)
end

#
p "カフェラテ".gsub("カフェ","ティー")   #=> "ティーラテ"
p "ラテラテ".gsub(/\Aラテ/,"カフェ")  #=> "カフェラテ"
p "ラテラテ".gsub("ラテ","カフェ") #=> "カフェカフェ"
# <hint>
# gsubメソッド　・・　文字列の中で条件と合致する部分を置き換えるメソッド
# １つ目の引数に置換元となる文字列や正規表現を、
# ２つ目の引数に置換先の文字列を書く。
